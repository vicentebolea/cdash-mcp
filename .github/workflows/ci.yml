name: CI/CD Pipeline

on:
  push:
    branches: [ master, release ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Code Style & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create virtual environment
        run: python -m venv venv

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          pip install black flake8
          pip install -e .

      - name: Run Black
        run: |
          source venv/bin/activate
          black --check --diff src/ tests/

      - name: Run Flake8
        run: |
          source venv/bin/activate
          flake8

  actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install actionlint
        run: |
          # Download and install actionlint
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          echo "${PWD}" >> "$GITHUB_PATH"

      - name: Run actionlint
        run: actionlint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint, actionlint]
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create virtual environment
        run: python -m venv venv

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run unit tests
        run: |
          source venv/bin/activate
          pytest 


  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, actionlint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt update
          sudo apt install -y podman

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Get short SHA
        id: slug
        run: echo "SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)" >> "$GITHUB_OUTPUT"

      - name: Build and push container image
        run: |
          # Build the image
          GITHUB_REPOSITORY="$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"
          podman build -t "ghcr.io/${GITHUB_REPOSITORY}/cdash:latest" \
                       -t "ghcr.io/${GITHUB_REPOSITORY}/cdash:${{ github.sha }}" \
                       -t "ghcr.io/${GITHUB_REPOSITORY}/cdash:${{ steps.slug.outputs.SHORT_SHA }}" \
                       .

          # Push all tags
          podman push "ghcr.io/${GITHUB_REPOSITORY}/cdash:latest"
          podman push "ghcr.io/${GITHUB_REPOSITORY}/cdash:${{ github.sha }}"
          podman push "ghcr.io/${GITHUB_REPOSITORY}/cdash:${{ steps.slug.outputs.SHORT_SHA }}"
